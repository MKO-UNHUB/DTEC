local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

-- Set theme:
-- WindUI:SetTheme("Dark")

--- EXAMPLE !!!

function gradient(text, startColor, endColor)
    local result = ""
    local length = #text

    for i = 1, length do
        local t = (i - 1) / math.max(length - 1, 1)
        local r = math.floor((startColor.R + (endColor.R - startColor.R) * t) * 255)
        local g = math.floor((startColor.G + (endColor.G - startColor.G) * t) * 255)
        local b = math.floor((startColor.B + (endColor.B - startColor.B) * t) * 255)

        local char = text:sub(i, i)
        result = result .. "<font color=\"rgb(" .. r ..", " .. g .. ", " .. b .. ")\">" .. char .. "</font>"
    end

    return result
end

local Confirmed = false

WindUI:Popup({
    Title = "ยินดีต้อนรับ!",
    Icon = "info",
    Content = "นี้คือสคิป Dig to Earth's CORE! " .. gradient("MKO", Color3.fromHex("#00FF87"), Color3.fromHex("#60EFFF")) .. " UNHUB",
    Buttons = {
        {
            Title = "Cancel",
            --Icon = "",
            Callback = function() end,
            Variant = "Tertiary", -- Primary, Secondary, Tertiary
        },
        {
            Title = "Continue",
            Icon = "arrow-right",
            Callback = function() Confirmed = true end,
            Variant = "Primary", -- Primary, Secondary, Tertiary
        }
    }
})


repeat wait() until Confirmed

--

local Window = WindUI:CreateWindow({
    Title = "Dig to Earth's CORE!",
    Icon = "",
    Author = "MKO UNHUB",
    Folder = "CloudHub",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Theme = "Dark",
    UserEnabled = false,
    SideBarWidth = 200,
    --Background = "rbxassetid://13511292247", -- rbxassetid only
    HasOutline = true,
    -- remove it below if you don't want to use the key system in your script.
    
})


--Window:SetBackgroundImage("rbxassetid://13511292247")


Window:EditOpenButton({
    Title = "Open Example UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0,16),
    StrokeThickness = 2,
    Color = ColorSequence.new( -- gradient
        Color3.fromHex("FF0F7B"), 
        Color3.fromHex("F89B29")
    ),
    --Enabled = false,
    Draggable = true,
})


local Tabs = {
    ToggleTab = Window:Tab({ Title = "Main", Icon = "toggle-left", Desc = "Switch settings on and off." }),
}

Window:SelectTab(1)




local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local DigEvent = ReplicatedStorage:WaitForChild("Remotes", 9e9):WaitForChild("DigEvent", 9e9)

local args = {}
local autoFameEnabled = false
local connection

Tabs.ToggleTab:Toggle({
    Title = "Auto Farm",
    Default = true,
    Callback = function(state)
        autoFameEnabled = state
        
        
        -- เริ่มหรือหยุดลูป
        if autoFameEnabled then
            connection = RunService.Heartbeat:Connect(function()
                -- ส่ง Event ทุก frame (หรือจะใส่ cooldown เพิ่มได้ถ้าต้องการ)
                pcall(function()
                    DigEvent:FireServer(unpack(args))
                end)
            end)
        else
            -- หยุดลูป
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end
})


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local BuyPickaxeEvent = ReplicatedStorage:WaitForChild("Remotes", 9e9):WaitForChild("BuyPickaxeEvent", 9e9)
local pickaxeFolder = ReplicatedStorage:WaitForChild("Pickaxes", 9e9)

local autoBuyEnabled = false

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local BuyPickaxeEvent = ReplicatedStorage:WaitForChild("Remotes", 9e9):WaitForChild("BuyPickaxeEvent", 9e9)
local pickaxeFolder = ReplicatedStorage:WaitForChild("Pickaxes", 9e9)

local autoBuyEnabled = false

Tabs.ToggleTab:Toggle({
    Title = "Auto Buy",
    Default = false,
    Callback = function(state)
        autoBuyEnabled = state
       

        if autoBuyEnabled then
            task.spawn(function()
                while autoBuyEnabled do
                    for _, pickaxe in pairs(pickaxeFolder:GetChildren()) do
                        local pickaxeName = pickaxe.Name

                        -- เช็คว่าผู้เล่นมี Pickaxe แล้วหรือยัง
                        local hasPickaxe =
                            player.Backpack:FindFirstChild(pickaxeName) or
                            (player.Character and player.Character:FindFirstChild(pickaxeName)) or
                            (player.StarterGear and player.StarterGear:FindFirstChild(pickaxeName))

                        if not hasPickaxe then
                            local args = {
                                [1] = pickaxeName
                            }
                            pcall(function()
                                BuyPickaxeEvent:FireServer(unpack(args))
                            end)
                        end
                    end
                    task.wait(2) -- หน่วงเพื่อไม่ให้แล็ค
                end
            end)
        end
    end
})



local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local autoWinEnabled = true

Tabs.ToggleTab:Toggle({
    Title = "Auto win",
    Default = true,
    Callback = function(state)
        autoWinEnabled = state

        if autoWinEnabled then
            task.spawn(function()
                while autoWinEnabled do
                    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                    if not hrp then
                        task.wait(1)
                        continue
                    end

                    for i = 1, 7 do
                        local world = workspace:FindFirstChild("World" .. i)
                        local spawns = world and world:FindFirstChild("Spawns")
                        local mapBottom = world and world:FindFirstChild("Map") and world.Map:FindFirstChild("Bottom")

                        if world and spawns and mapBottom then
                            local thirdSpawn = spawns:GetChildren()[3]
                            if thirdSpawn and (hrp.Position - thirdSpawn.Position).Magnitude <= 100 then
                                hrp.CFrame = mapBottom.CFrame + Vector3.new(0, 5, 0)
                                break
                            end
                        end
                    end

                    task.wait(1.5)
                end
            end)
        end
    end
})



Tabs.SliderTab:Slider({
    Title = "Volume Slider",
    Value = {
        Min = 0,
        Max = 100,
        Default = 50,
    },
    Callback = function(value) print("Volume set to: " .. value) end
})

Tabs.SliderTab:Slider({
    Title = "Brightness Slider",
    Value = {
        Min = 1,
        Max = 100,
        Default = 75,
    },
    Callback = function(value) print("Brightness set to: " .. value) end
})


Tabs.InputTab:Input({
    Title = "Username",
    Default = "Guest",
    Placeholder = "Enter your username",
    Callback = function(input) print("Username: " .. input) end
})

Tabs.InputTab:Input({
    Title = "Password",
    Default = "",
    Placeholder = "Enter your password",
    Callback = function(input) print("Password entered.") end
})


Tabs.DropdownTab:Dropdown({
    Title = "Select an Option",
    Values = { "Option 1", "Option 2", "Option 3" },
    Value = "Option 1",
    Callback = function(option) print("Selected: " .. option) end
})

Tabs.DropdownTab:Dropdown({
    Title = "Choose a Category",
    Values = { "Category A", "Category B", "Category C" },
    Value = "Category A",
    Callback = function(option) print("Category selected: " .. option) end
})



-- Configuration
-- Optional


local HttpService = game:GetService("HttpService")

local folderPath = "WindUI"
makefolder(folderPath)

local function SaveFile(fileName, data)
    local filePath = folderPath .. "/" .. fileName .. ".json"
    local jsonData = HttpService:JSONEncode(data)
    writefile(filePath, jsonData)
end

local function LoadFile(fileName)
    local filePath = folderPath .. "/" .. fileName .. ".json"
    if isfile(filePath) then
        local jsonData = readfile(filePath)
        return HttpService:JSONDecode(jsonData)
    end
end

local function ListFiles()
    local files = {}
    for _, file in ipairs(listfiles(folderPath)) do
        local fileName = file:match("([^/]+)%.json$")
        if fileName then
            table.insert(files, fileName)
        end
    end
    return files
end

Tabs.WindowTab:Section({ Title = "Window" })

local themeValues = {}
for name, _ in pairs(WindUI:GetThemes()) do
    table.insert(themeValues, name)
end

local themeDropdown = Tabs.WindowTab:Dropdown({
    Title = "Select Theme",
    Multi = false,
    AllowNone = false,
    Value = nil,
    Values = themeValues,
    Callback = function(theme)
        WindUI:SetTheme(theme)
    end
})
themeDropdown:Select(WindUI:GetCurrentTheme())

local ToggleTransparency = Tabs.WindowTab:Toggle({
    Title = "Toggle Window Transparency",
    Callback = function(e)
        Window:ToggleTransparency(e)
    end,
    Value = WindUI:GetTransparency()
})

Tabs.WindowTab:Section({ Title = "Save" })

local fileNameInput = ""
Tabs.WindowTab:Input({
    Title = "Write File Name",
    PlaceholderText = "Enter file name",
    Callback = function(text)
        fileNameInput = text
    end
})

Tabs.WindowTab:Button({
    Title = "Save File",
    Callback = function()
        if fileNameInput ~= "" then
            SaveFile(fileNameInput, { Transparent = WindUI:GetTransparency(), Theme = WindUI:GetCurrentTheme() })
        end
    end
})

Tabs.WindowTab:Section({ Title = "Load" })

local filesDropdown
local files = ListFiles()

filesDropdown = Tabs.WindowTab:Dropdown({
    Title = "Select File",
    Multi = false,
    AllowNone = true,
    Values = files,
    Callback = function(selectedFile)
        fileNameInput = selectedFile
    end
})

Tabs.WindowTab:Button({
    Title = "Load File",
    Callback = function()
        if fileNameInput ~= "" then
            local data = LoadFile(fileNameInput)
            if data then
                WindUI:Notify({
                    Title = "File Loaded",
                    Content = "Loaded data: " .. HttpService:JSONEncode(data),
                    Duration = 5,
                })
                if data.Transparent then 
                    Window:ToggleTransparency(data.Transparent)
                    ToggleTransparency:SetValue(data.Transparent)
                end
                if data.Theme then WindUI:SetTheme(data.Theme) end
            end
        end
    end
})

Tabs.WindowTab:Button({
    Title = "Overwrite File",
    Callback = function()
        if fileNameInput ~= "" then
            SaveFile(fileNameInput, { Transparent = WindUI:GetTransparency(), Theme = WindUI:GetCurrentTheme() })
        end
    end
})

Tabs.WindowTab:Button({
    Title = "Refresh List",
    Callback = function()
        filesDropdown:Refresh(ListFiles())
    end
})

local currentThemeName = WindUI:GetCurrentTheme()
local themes = WindUI:GetThemes()

local ThemeAccent = themes[currentThemeName].Accent
local ThemeOutline = themes[currentThemeName].Outline
local ThemeText = themes[currentThemeName].Text
local ThemePlaceholderText = themes[currentThemeName].PlaceholderText

function updateTheme()
    WindUI:AddTheme({
        Name = currentThemeName,
        Accent = ThemeAccent,
        Outline = ThemeOutline,
        Text = ThemeText,
        PlaceholderText = ThemePlaceholderText
    })
    WindUI:SetTheme(currentThemeName)
end

local CreateInput = Tabs.CreateThemeTab:Input({
    Title = "Theme Name",
    Value = currentThemeName,
    Callback = function(name)
        currentThemeName = name
    end
})

Tabs.CreateThemeTab:Colorpicker({
    Title = "Background Color",
    Default = Color3.fromHex(ThemeAccent),
    Callback = function(color)
        ThemeAccent = color:ToHex()
    end
})

Tabs.CreateThemeTab:Colorpicker({
    Title = "Outline Color",
    Default = Color3.fromHex(ThemeOutline),
    Callback = function(color)
        ThemeOutline = color:ToHex()
    end
})

Tabs.CreateThemeTab:Colorpicker({
    Title = "Text Color",
    Default = Color3.fromHex(ThemeText),
    Callback = function(color)
        ThemeText = color:ToHex()
    end
})

Tabs.CreateThemeTab:Colorpicker({
    Title = "Placeholder Text Color",
    Default = Color3.fromHex(ThemePlaceholderText),
    Callback = function(color)
        ThemePlaceholderText = color:ToHex()
    end
})

Tabs.CreateThemeTab:Button({
    Title = "Update Theme",
    Callback = function()
        updateTheme()
    end
})
